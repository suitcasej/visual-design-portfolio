{"ast":null,"code":"var identityProjection = \"translate3d(0px, 0px, 0) scale(1, 1)\";\n\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n  /**\n   * The translations we use to calculate are always relative to the viewport coordinate space.\n   * But when we apply scales, we also scale the coordinate space of an element and its children.\n   * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n   * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n   */\n  var xTranslate = delta.x.translate / treeScale.x;\n  var yTranslate = delta.y.translate / treeScale.y;\n  var transform = \"translate3d(\" + xTranslate + \"px, \" + yTranslate + \"px, 0) \";\n\n  if (latestTransform) {\n    var rotate = latestTransform.rotate,\n        rotateX = latestTransform.rotateX,\n        rotateY = latestTransform.rotateY;\n    if (rotate) transform += \"rotate(\" + rotate + \"deg) \";\n    if (rotateX) transform += \"rotateX(\" + rotateX + \"deg) \";\n    if (rotateY) transform += \"rotateY(\" + rotateY + \"deg) \";\n  }\n\n  transform += \"scale(\" + delta.x.scale + \", \" + delta.y.scale + \")\";\n  return transform === identityProjection ? \"none\" : transform;\n}\n\nexport { buildProjectionTransform, identityProjection };","map":{"version":3,"sources":["/Users/jordanhodges/Projects/Portfolio/Portfolio/node_modules/framer-motion/dist/es/projection/styles/transform.mjs"],"names":["identityProjection","buildProjectionTransform","delta","treeScale","latestTransform","xTranslate","x","translate","yTranslate","y","transform","rotate","rotateX","rotateY","scale"],"mappings":"AAAA,IAAIA,kBAAkB,GAAG,sCAAzB;;AACA,SAASC,wBAAT,CAAkCC,KAAlC,EAAyCC,SAAzC,EAAoDC,eAApD,EAAqE;AACjE;AACJ;AACA;AACA;AACA;AACA;AACI,MAAIC,UAAU,GAAGH,KAAK,CAACI,CAAN,CAAQC,SAAR,GAAoBJ,SAAS,CAACG,CAA/C;AACA,MAAIE,UAAU,GAAGN,KAAK,CAACO,CAAN,CAAQF,SAAR,GAAoBJ,SAAS,CAACM,CAA/C;AACA,MAAIC,SAAS,GAAG,iBAAiBL,UAAjB,GAA8B,MAA9B,GAAuCG,UAAvC,GAAoD,SAApE;;AACA,MAAIJ,eAAJ,EAAqB;AACjB,QAAIO,MAAM,GAAGP,eAAe,CAACO,MAA7B;AAAA,QAAqCC,OAAO,GAAGR,eAAe,CAACQ,OAA/D;AAAA,QAAwEC,OAAO,GAAGT,eAAe,CAACS,OAAlG;AACA,QAAIF,MAAJ,EACID,SAAS,IAAI,YAAYC,MAAZ,GAAqB,OAAlC;AACJ,QAAIC,OAAJ,EACIF,SAAS,IAAI,aAAaE,OAAb,GAAuB,OAApC;AACJ,QAAIC,OAAJ,EACIH,SAAS,IAAI,aAAaG,OAAb,GAAuB,OAApC;AACP;;AACDH,EAAAA,SAAS,IAAI,WAAWR,KAAK,CAACI,CAAN,CAAQQ,KAAnB,GAA2B,IAA3B,GAAkCZ,KAAK,CAACO,CAAN,CAAQK,KAA1C,GAAkD,GAA/D;AACA,SAAOJ,SAAS,KAAKV,kBAAd,GAAmC,MAAnC,GAA4CU,SAAnD;AACH;;AAED,SAAST,wBAAT,EAAmCD,kBAAnC","sourcesContent":["var identityProjection = \"translate3d(0px, 0px, 0) scale(1, 1)\";\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    var xTranslate = delta.x.translate / treeScale.x;\n    var yTranslate = delta.y.translate / treeScale.y;\n    var transform = \"translate3d(\" + xTranslate + \"px, \" + yTranslate + \"px, 0) \";\n    if (latestTransform) {\n        var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;\n        if (rotate)\n            transform += \"rotate(\" + rotate + \"deg) \";\n        if (rotateX)\n            transform += \"rotateX(\" + rotateX + \"deg) \";\n        if (rotateY)\n            transform += \"rotateY(\" + rotateY + \"deg) \";\n    }\n    transform += \"scale(\" + delta.x.scale + \", \" + delta.y.scale + \")\";\n    return transform === identityProjection ? \"none\" : transform;\n}\n\nexport { buildProjectionTransform, identityProjection };\n"]},"metadata":{},"sourceType":"module"}